# Header files "stdint.h", "stddef.h", "stdbool.h" are auto imported in symbol c

;; A type that means no-type
*struct void {
    # Implemented by the compiler
    # Should this even be a struct
    # It is a type in C so it makes sense to be one in xy.
}

# Primitive bool type

;; 8-bit true/false type
*struct Bool {
    # Implemented by the compiler
}

# Primitive numeric types.

;; 8-bit signed integer type
*struct Byte {
    # Implemented by the compiler
}

;; 16-bit signed integer type
*struct Short {
    # Implemented by the compiler
}

;; 32-bit signed integer type
*struct Int {
    # Implemented by the compiler
}

;; 32-bit signed unicode character/codepoint
;; No input validation is performed so even values outside of the Unicode
;; codepoint range (0 - 1_114_111) can be used as long as they fit in 32 bits.
*struct Char {
    # Implemented by the compiler
}

;; 64-bit signed integer type
*struct Long {
    # Implemented by the compiler
}

;; 8-bit unsigned integer type
*struct Ubyte {
    # Implemented by the compiler
}

;; 16-bit unsigned integer type
*struct Ushort {
    # Implemented by the compiler
}

;; 32-bit unsigned integer type
*struct Uint {
    # Implemented by the compiler
}

;; 64-bit unsigned integer type
*struct Ulong {
    # Implemented by the compiler
}

;; Integer type as large as the addressable memory space on the target
;; architecture. This type is (by definition) platform dependant. It is
;; provided for interfacing with native libraries and for building libraries. 
;; Size is always unsigned. For error handling use xy error-handling mechanisms.
*struct Size {
    # Implemented by the compiler
}

;; A good old pointer. Use with caution.
*struct Ptr~[to: struct] {
    # Implemented by the compiler
}

;; Dereferencing a pointer
*def get(ptr: Ptr) -> [ Ptr~[^ptr..to] ] {
    # Implemented by the compiler
}

;; Dereferencing a pointer at an index (offset)
*def get(
    ptr: Ptr,
    idx: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size)
) -> [ Ptr~[^ptr..to] ] {
    # Implemented by the compiler
}

*def set(
    ptr: Ptr,
    idx: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size),
    value: pseudo Any
) -> void {
    # Implemented by the compiler
}

;; The address of Any variable or even temporary value
*def addrof(arg: Any) -> Ptr~[%^arg] {
    # Implemented by the compiler
}

;; 32-bit IEEE 754 floating point number
*struct Float {
    # Implemented by the compiler
}

;; 64-bit IEEE 754 floating point number
*struct Double {
    # Implemented by the compiler
}

# Limits

*def max(:Int) -> Int {
    return c.INT32_MAX;
}

*def max(:Size) -> Size {
    return c.SIZE_MAX;
}

# Arithmetic operations

## Bool

;; Compare {a} and {b} for equality a.k.a. logic xnor
*def cmpEq(a: Bool, b: Bool) -> Bool {
    # Implemented by the compiler
}

;; Compare {a} and {b} for inequality a.k.a. logic xor
*def cmpNe(a: Bool, b: Bool) -> Bool {
    # Implemented by the compiler
}

## Byte

;; Addition
*def add(a: Byte, b: (Byte, Short, Int, Long)) -> %b {
    # Implemented by the compiler
}

;; Subtraction
*def sub(a: Byte, b: (Byte, Short, Int, Long)) -> %b {
    # Implemented by the compiler
}

;; Multiplication
*def mul(a: Byte, b: (Byte, Short, Int, Long)) -> %b {
    # Implemented by the compiler
}

;; Integer division
*def div(a: Byte, b: (Byte, Short, Int, Long)) -> %b {
    # Implemented by the compiler
}

;; Equal
*def cmpEq(a: Byte, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

;; Not equal
*def cmpNe(a: Byte, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

;; Greater than
*def cmpGt(a: Byte, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

;; Greater or equal than
*def cmpGe(a: Byte, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

;; Less than
*def cmpLt(a: Byte, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

;; Less or equal than
*def cmpLe(a: Byte, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

## Ubyte

*def add(a: Ubyte, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> %b {
    # Implemented by the compiler
}

*def sub(a: Ubyte, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> %b {
    # Implemented by the compiler
}

*def mul(a: Ubyte, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> %b {
    # Implemented by the compiler
}

*def div(a: Ubyte, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> %b {
    # Implemented by the compiler
}

*def cmpEq(a: Ubyte, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpNe(a: Ubyte, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpGt(a: Ubyte, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpGe(a: Ubyte, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpLt(a: Ubyte, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpLe(a: Ubyte, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

## Short

*def add(a: Short, b: (Byte, Ubyte, Short)) -> Short {
    # Implemented by the compiler
}

*def add(a: Short, b: (Ushort, Int, Uint, Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def sub(a: Short, b: (Byte, Ubyte, Short)) -> Short {
    # Implemented by the compiler
}

*def sub(a: Short, b: (Ushort, Int, Uint, Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def mul(a: Short, b: (Byte, Ubyte, Short)) -> Short {
    # Implemented by the compiler
}

*def mul(a: Short, b: (Ushort, Int, Uint, Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def div(a: Short, b: (Byte, Ubyte, Short)) -> Short {
    # Implemented by the compiler
}

*def div(a: Short, b: (Ushort, Int, Uint, Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def cmpEq(a: Short, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

*def cmpNe(a: Short, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

*def cmpGt(a: Short, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

*def cmpGe(a: Short, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

*def cmpLt(a: Short, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

*def cmpLe(a: Short, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

## Ushort

*def add(a: Ushort, b: (Byte, Ubyte, Short, Ushort)) -> Ushort {
    # Implemented by the compiler
}

*def add(a: Ushort, b: (Int, Uint, Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def sub(a: Ushort, b: (Byte, Ubyte, Short, Ushort)) -> Ushort {
    # Implemented by the compiler
}

*def sub(a: Ushort, b: (Int, Uint, Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def mul(a: Ushort, b: (Byte, Ubyte, Short, Ushort)) -> Ushort {
    # Implemented by the compiler
}

*def mul(a: Ushort, b: (Int, Uint, Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def div(a: Ushort, b: (Byte, Ubyte, Short, Ushort)) -> Ushort {
    # Implemented by the compiler
}

*def div(a: Ushort, b: (Int, Uint, Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def cmpEq(a: Ushort, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpNe(a: Ushort, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpGt(a: Ushort, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpGe(a: Ushort, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpLt(a: Ushort, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpLe(a: Ushort, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

## Int

*def add(a: Int, b: (Byte, Ubyte, Short, Ushort, Int)) -> Int {
    # Implemented by the compiler
}

*def add(a: Int, b: (Uint, Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def sub(a: Int, b: (Byte, Ubyte, Short, Ushort, Int)) -> Int {
    # Implemented by the compiler
}

*def sub(a: Int, b: (Uint, Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def mul(a: Int, b: (Byte, Ubyte, Short, Ushort, Int)) -> Int {
    # Implemented by the compiler
}

*def mul(a: Int, b: (Uint, Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def div(a: Int, b: (Byte, Ubyte, Short, Ushort, Int)) -> Int {
    # Implemented by the compiler
}

*def div(a: Int, b: (Uint, Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

;; Compare for equality.
;; If {b} has a smaller type that {a} than it is extended to the type of {a}.
;; Otherwise {a} is extended to the type of {b}
*def cmpEq(
    a: Int,
    b: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Double, Float)
) -> Bool {
    # Implemented by the compiler
}

*def cmpNe(
    a: Int,
    b: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Double, Float)
) -> Bool {
    # Implemented by the compiler
}

*def cmpGt(
    a: Int,
    b: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Double, Float)
) -> Bool {
    # Implemented by the compiler
}

*def cmpGe(
    a: Int,
    b: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Double, Float)
) -> Bool {
    # Implemented by the compiler
}

*def cmpLt(
    a: Int,
    b: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Double, Float)
) -> Bool {
    # Implemented by the compiler
}

*def cmpLe(
    a: Int,
    b: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Double, Float)
) -> Bool {
    # Implemented by the compiler
}

## Uint

*def add(a: Uint, b: (Byte, Ubyte, Short, Ushort, Int, Uint)) -> Uint {
    # Implemented by the compiler
}

*def add(a: Uint, b: (Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def sub(a: Uint, b: (Byte, Ubyte, Short, Ushort, Int, Uint)) -> Uint {
    # Implemented by the compiler
}

*def sub(a: Uint, b: (Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def mul(a: Uint, b: (Byte, Ubyte, Short, Ushort, Int, Uint)) -> Uint {
    # Implemented by the compiler
}

*def mul(a: Uint, b: (Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def div(a: Uint, b: (Byte, Ubyte, Short, Ushort, Int, Uint)) -> Uint {
    # Implemented by the compiler
}

*def div(a: Uint, b: (Long, Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def cmpEq(a: Uint, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpNe(a: Uint, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpGt(a: Uint, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpGe(a: Uint, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpLt(a: Uint, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpLe(a: Uint, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

## Long

*def add(a: Long, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Long)) -> Long {
    # Implemented by the compiler
}

*def add(a: Long, b: (Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def sub(a: Long, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Long)) -> Long {
    # Implemented by the compiler
}

*def sub(a: Long, b: (Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def mul(a: Long, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Long)) -> Long {
    # Implemented by the compiler
}

*def mul(a: Long, b: (Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def div(a: Long, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Long)) -> Long {
    # Implemented by the compiler
}

*def div(a: Long, b: (Ulong, Size, Double, Float)) -> %b {
    # Implemented by the compiler
}

*def cmpEq(a: Long, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

*def cmpNe(a: Long, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

*def cmpGt(a: Long, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

*def cmpGe(a: Long, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

*def cmpLt(a: Long, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

*def cmpLe(a: Long, b: (Byte, Short, Int, Long)) -> Bool {
    # Implemented by the compiler
}

## Ulong

*def add(a: Ulong, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong)) -> Ulong {
    # Implemented by the compiler
}

*def add(a: Ulong, b: (Double, Float)) -> %b {
    # Implemented by the compiler
}

*def sub(a: Ulong, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong)) -> Ulong {
    # Implemented by the compiler
}

*def sub(a: Ulong, b: (Double, Float)) -> %b {
    # Implemented by the compiler
}

*def mul(a: Ulong, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong)) -> Ulong {
    # Implemented by the compiler
}

*def mul(a: Ulong, b: (Double, Float)) -> %b {
    # Implemented by the compiler
}

*def div(a: Ulong, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong)) -> Ulong {
    # Implemented by the compiler
}

*def div(a: Ulong, b: (Double, Float)) -> %b {
    # Implemented by the compiler
}

*def cmpEq(a: Ulong, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpNe(a: Ulong, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpGt(a: Ulong, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpGe(a: Ulong, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpLt(a: Ulong, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpLe(a: Ulong, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

## Float

*def add(a: Float, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Float)) -> Float {
    # Implemented by the compiler
}

*def add(a: Float, b: Double) -> %b {
    # Implemented by the compiler
}

*def sub(a: Float, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Float)) -> Float {
    # Implemented by the compiler
}

*def sub(a: Float, b: Double) -> %b {
    # Implemented by the compiler
}

*def mul(a: Float, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Float)) -> Float {
    # Implemented by the compiler
}

*def mul(a: Float, b: Double) -> %b {
    # Implemented by the compiler
}

*def div(a: Float, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Float)) -> Float {
    # Implemented by the compiler
}

*def div(a: Float, b: Double) -> %b {
    # Implemented by the compiler
}

*def cmpEq(a: Float, b: (Int, Float, Double)) -> Bool {
    # Implemented by the compiler
}

*def cmpNe(a: Float, b: (Int, Float, Double)) -> Bool {
    # Implemented by the compiler
}

*def cmpGt(a: Float, b: (Int, Float, Double)) -> Bool {
    # Implemented by the compiler
}

*def cmpGe(a: Float, b: (Int, Float, Double)) -> Bool {
    # Implemented by the compiler
}

*def cmpLt(a: Float, b: (Int, Float, Double)) -> Bool {
    # Implemented by the compiler
}

*def cmpLe(a: Float, b: (Int, Float, Double)) -> Bool {
    # Implemented by the compiler
}

## Double

*def add(a: Double, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Float, Double)) -> Double {
    # Implemented by the compiler
}

*def sub(a: Double, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Float, Double)) -> Double {
    # Implemented by the compiler
}

*def mul(a: Double, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Float, Double)) -> Double {
    # Implemented by the compiler
}

*def div(a: Double, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Float, Double)) -> Double {
    # Implemented by the compiler
}

*def cmpEq(a: Double, b: (Int, Float, Double)) -> Bool {
    # Implemented by the compiler
}

*def cmpNe(a: Double, b: (Int, Float, Double)) -> Bool {
    # Implemented by the compiler
}

*def cmpGt(a: Double, b: (Int, Float, Double)) -> Bool {
    # Implemented by the compiler
}

*def cmpGe(a: Double, b: (Int, Float, Double)) -> Bool {
    # Implemented by the compiler
}

*def cmpLt(a: Double, b: (Int, Float, Double)) -> Bool {
    # Implemented by the compiler
}

*def cmpLe(a: Double, b: (Int, Float, Double)) -> Bool {
    # Implemented by the compiler
}

## Size

*def add(a: Size, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Size)) -> Size {
    # Implemented by the compiler
}

*def sub(a: Size, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Size)) -> Size {
    # Implemented by the compiler
}

*def mul(a: Size, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Size)) -> Size {
    # Implemented by the compiler
}

*def div(a: Size, b: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Size)) -> Size {
    # Implemented by the compiler
}

*def cmpEq(a: Size, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpNe(a: Size, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpGt(a: Size, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpGe(a: Size, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpLt(a: Size, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

*def cmpLe(a: Size, b: (Ubyte, Ushort, Int, Uint, Ulong, Size)) -> Bool {
    # Implemented by the compiler
}

## Ptr

*def add(ptr: Ptr, num: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Size)) -> Ptr~[^ptr..to] {
    # implemented by the compiler
}

*def sub(ptr: Ptr, num: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Size)) -> Ptr~[^ptr..to] {
    # implemented by the compiler
}

*def cmpEq(a: Ptr, b: Ptr) -> Bool {
    # Implemented by the compiler
}

*def cmpNe(a: Ptr, b: Ptr) -> Bool {
    # Implemented by the compiler
}


*def not(a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Bool)) -> Bool {
    # Implemented by the compiler
}

*def inc(a: mut Int) -> void {
    # Implemented by the compiler
}

*def inc(a: mut Uint) -> void {
    # Implemented by the compiler
}

*def dec(a: mut Int) -> void {
    # Implemented by the compiler
}

*def dec(a: mut Size) -> void {
    # Implemented by the compiler
}

*def inc(a: mut Size) -> void {
    # Implemented by the compiler
}

# Conversion between types

;; Convert {a} to Ubyte
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Ubyte
) -> Ubyte {
    # Implemented by the compiler
}

;; Convert {a} to Byte
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Byte
) -> Byte {
    # Implemented by the compiler
}

;; Convert {a} to Short
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Short
) -> Short {
    # Implemented by the compiler
}

;; Convert {a} to Ushort
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Ushort
) -> Ushort {
    # Implemented by the compiler
}

;; Convert {a} to Int
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Int
) -> Int {
    # Implemented by the compiler
}


;; Convert {a} to Uint
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Uint
) -> Uint {
    # Implemented by the compiler
}

;; Convert {a} to Long
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Long
) -> Long {
    # Implemented by the compiler
}


;; Convert {a} to Ulong
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Ulong
) -> Ulong {
    # Implemented by the compiler
}

;; Convert {a} to Float
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong,
        Float, Double, Char),
    :Float
) -> Float {
    # Implemented by the compiler
}

;; Convert {a} to Double
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong,
        Float, Double, Char),
    :Double
) -> Double {
    # Implemented by the compiler
}

;; Convert {a} to Bool
*def to(
    a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong,
        Float, Double, Char),
    :Bool
) -> Bool {
    # Implemented by the compiler
}

# Logical operations

*def and(a: Bool, ^b: Bool) -> Bool {
    # Implemented by the compiler
}

*def or(a: Bool, ^b: Bool) -> Bool {
    # Implemented by the compiler
}

*def xor(a: Bool, b: Bool) -> Bool {
    # Implemented by the compiler
}

# Tag related stuff

;; Use this struct to tag other structs that are intended to be used as tags
;; themselves
struct TagCtor {
    # Implemented by the compiler
}

# String related stuff

;; Use this struct to mark functions that construct strings
struct StrCtor {
    # Implemented by the compiler
}

# Arrays

;; Get the element at position {index} from the array {arr}
*def get(arr: pseudo @Any[], index: Int) -> arr[ Ptr ] {
    # Implemented by the compiler
}

*def get(arr: pseudo @Any[], index: Uint) -> arr[ Ptr ] {
    # Implemented by the compiler
}

*def get(arr: pseudo @Any[], index: Size) -> arr[ Ptr ] {
    # Implemented by the compiler
}

;; Set element at position {index} of the array {arr}
*def set(arr: pseudo @Any[], index: Uint, val: pseudo Any) -> void {
    # Implemented by the compiler
}

;; Set element at position {index} of the array {arr}
*def set(arr: pseudo @Any[], index: Size, val: pseudo Any) -> void {
    # Implemented by the compiler
}

;; Use this struct to mark the function that should be used as the program
;; entry point. If multiple entry points are found during compilation
;; the one with the highest priority is used. If there are more than one
;; function with the highest priority then a compilation error is reported.
struct EntryPoint {
    priority: Int;
}

# Arrays

*def iter(arr: pseudo @Any[]) -> arr[ Size ] {
    # Implemented by the compiler
}

*def valid(arr: pseudo @Any[], idx: Size) -> Bool {
    # Implemented by the compiler
}

*def next(arr: pseudo @Any[], idx: mut Size) -> void {
    # Implemented by the compiler
}

*def len(arr: pseudo @Any[]) -> Size {
    # Implemented by the compiler
}

# External libraries

;; Use this struct to mark external libraries
struct CLib {
    # Implemented by the compiler
}

# Iter stuff

;; Use this struct to mark iterator functions
struct IterCtor {
    # Implemented by the compiler
}

# Function Selection

struct FuncSelection {
    # Compile-time only array-like structure implemented by the compiler
}

# Miscellaneous

# Bitwise Operations

*struct Bits8 {
    # Opaque to the programmer
}

*struct Bits16 {
    # Opaque to the programmer
}

*struct Bits32 {
    # Opaque to the programmer
}

*struct Bits64 {
    # Opaque to the programmer
}

;; Conversion integer type -> bits

*def to(a: (Ubyte, Byte), :Bits8) -> Bits8 {
    # implemented by the compiler
}

*def to(a: (Ushort, Short), :Bits16) -> Bits16 {
    # implemented by the compiler
}

*def to(a: (Uint, Int), :Bits32) -> Bits32 {
    # implemented by the compiler
}

*def to(a: (Ulong, Long), :Bits64) -> Bits64 {
    # implemented by the compiler
}

;; Conversion bits -> integer type

*def to(a: Bits8, :Byte) -> Byte {
    # implemented by the compiler
}

*def to(a: Bits8, :Ubyte) -> Ubyte {
    # implemented by the compiler
}

*def to(a: Bits16, :Short) -> Short {
    # implemented by the compiler
}

*def to(a: Bits16, :Ushort) -> Ushort {
    # implemented by the compiler
}

*def to(a: Bits32, :Int) -> Int {
    # implemented by the compiler
}

*def to(a: Bits32, :Uint) -> Uint {
    # implemented by the compiler
}

*def to(a: Bits64, :Long) -> Long {
    # implemented by the compiler
}

*def to(a: Bits64, :Ulong) -> Ulong {
    # implemented by the compiler
}

;; Bitwise and
*def and(a: (Bits8, Bits16, Bits32, Bits64), b: %a) -> %a {
    # implemented by the compiler
}

;; Bitwise or
*def or(a: (Bits8, Bits16, Bits32, Bits64), b: %a) -> %a {
    # implemented by the compiler
}

;; Bitwise xor
*def sub(a: (Bits8, Bits16, Bits32, Bits64), b: %a) -> %a {
    # implemented by the compiler
}

;; Bitwise not
*def not(a: (Bits8, Bits16, Bits32, Bits64)) -> %a {
    # implemented by the compiler
}

;; Compare for equality
*def cmpEq(a: (Bits8, Bits16, Bits32, Bits64), b: %a) -> Bool {
    # implemented by the compiler
}

;; Compare for equality
*def cmpNe(a: (Bits8, Bits16, Bits32, Bits64), b: %a) -> Bool {
    # implemented by the compiler
}

;; Shift bits left a given number of {times}
;; *NOTE* If {times} is negative or larger than the number of bits in {a}
;; then a mask is applied to {times} before shifting. The mask is
;; * 0x03 - for Bits8  i.e. force a range of 0-7
;; * 0x0F - for Bits16 i.e. force a range of 0-15
;; * 0x1F - for Bits32 i.e. force a range of 0-31
;; * 0x3F - for Bits64 i.e. force a range of 0-61
;; is applied to {times} before the actual shift is performed
*def shiftl(
    a: (Bits8, Bits16, Bits32, Bits64),
    times: (Byte, Ubyte, Short, Ushort, Int, Uint)
) -> %a {
    # implemented by the compiler
}

;; Shift bits right a given number of {times}
;; ...
*def shiftr(
    a: (Bits8, Bits16, Bits32, Bits64),
    times: (Byte, Ubyte, Short, Ushort, Int, Uint)
) -> %a {
    # implemented by the compiler
}

;; Arithmetic shift bits right a given number of {times}
;; ...
*def ashiftr(
    a: (Bits8, Bits16, Bits32, Bits64),
    times: (Byte, Ubyte, Short, Ushort, Int, Uint)
) -> %a {
    # implemented by the compiler
}
