# Header files "stdint.h", "stddef.h", "stdbool.h" are auto imported in symbol c

;; A type that means no-type
*struct void {
    # Implemented by the compiler
    # Should this even be a typeany
    # It is a type in C so it makes sense to be one in xy.
}

# Primitive bool type

;; 8-bit true/false type
*struct Bool {
    # Implemented by the compiler
}

# Primitive numeric types.

;; 8-bit signed integer type
*struct Byte {
    # Implemented by the compiler
}

;; 16-bit signed integer type
*struct Short {
    # Implemented by the compiler
}

;; 32-bit signed integer type
*struct Int {
    # Implemented by the compiler
}

;; 32-bit signed unicode character/codepoint
;; No input validation is performed so even values outside of the Unicode
;; codepoint range (0 - 1_114_111) can be used as long as they fit in 32 bits.
*struct Char {
    # Implemented by the compiler
}

;; 64-bit signed integer type
*struct Long {
    # Implemented by the compiler
}

;; 8-bit unsigned integer type
*struct Ubyte {
    # Implemented by the compiler
}

;; 16-bit unsigned integer type
*struct Ushort {
    # Implemented by the compiler
}

;; 32-bit unsigned integer type
*struct Uint {
    # Implemented by the compiler
}

;; 64-bit unsigned integer type
*struct Ulong {
    # Implemented by the compiler
}

;; Integer type as large as the addressable memory space on the target
;; architecture. This type is (by definition) platform dependant. It is
;; provided for interfacing with native libraries and for building libraries. 
;; Size is always unsigned. For error handling use xy error-handling mechanisms.
*struct Size {
    # Implemented by the compiler
}

;; A good old pointer. Use with caution.
*struct Ptr~[to: struct] {
    # Implemented by the compiler
}

*def get(ptr: Ptr) -> [ Ptr~[^ptr..to] ] {
    # Implemented by the compiler
}

*def get(ptr: Ptr, idx: Int) -> [ Ptr~[^ptr..to] ] {
    # Implemented by the compiler
}

*def get(ptr: Ptr, idx: Size) -> [ Ptr~[^ptr..to] ] {
    # Implemented by the compiler
}

*def set(ptr: Ptr, idx: Int, value: pseudo Any) -> void {
    # Implemented by the compiler
}

*def set(ptr: Ptr, idx: Size, value: pseudo Any) -> void {
    # Implemented by the compiler
}

# XXX shouldn't be Int
*def cmp(a: Ptr, b: Ptr) -> Int {
    # Implemented by the compiler
}

;; The address of Any variable or even temporary value
*def addrof(arg: Any) -> Ptr~[%^arg] {
    # Implemented by the compiler
}

;; 32-bit IEEE 754 floating point number
*struct Float {
    # Implemented by the compiler
}

;; 64-bit IEEE 754 floating point number
*struct Double {
    # Implemented by the compiler
}

# Limits

*def max(:Int) -> Int {
    return c.INT32_MAX;
}

*def max(:Size) -> Size {
    return c.SIZE_MAX;
}

# Arithmatic operations

*def add(a: Int, b: Int) -> Int {
    # Implemented by the compiler
}

*def add(a: Int, b: Double) -> Double {
    # Implemented by the compiler
}

*def add(a: Int, b: Float) -> Float {
    # Implemented by the compiler
}

*def add(a: Double, b: Float) -> Double {
    # Implemented by the compiler
}

*def add(a: Double, b: Double) -> Double {
    # Implemented by the compiler
}

*def add(a: Size, b: Size) -> Size {
    # Implemented by the compiler
}

*def add(a: Size, b: Int) -> Size {
    # Implemented by the compiler
}

*def add(a: Long, b: Int) -> Long {
    # Implemented by the compiler
}

*def add(a: Double, b: Int) -> Double {
    # Implemented by the compiler
}

*def add(a: Ptr, b: Int) -> Ptr {
    # Implemented by the compiler
}

*def add(a: Ptr, b: Size) -> Ptr {
    # Implemented by the compiler
}

*def add(a: Float, b: Float) -> Float {
    # Implemented by the compiler
}

;; Subtraction
*def sub(a: Int, b: Int) -> Int {
    # Implemented by the compiler
}

*def sub(a: Int, b: Uint) -> Int {
    # Implemented by the compiler
}

*def sub(a: Size, b: Int) -> Size {
    # Implemented by the compiler
}

*def sub(a: Size, b: Size) -> Size {
    # Implemented by the compiler
}

*def sub(ptr: Ptr, b: Int) -> Ptr~[^ptr..to] {
    # Implemented by the compiler
}

*def sub(ptr: Ptr, b: Size) -> Ptr~[^ptr..to] {
    # Implemented by the compiler
}


*def neg(a: Int) -> Int {
    # Implemented by the compiler
}

*def neg(a: Size) -> Int {
    # Implemented by the compiler
}

*def inc(a: mut Int) -> void {
    # Implemented by the compiler
}

*def inc(a: mut Uint) -> void {
    # Implemented by the compiler
}

*def dec(a: mut Int) -> void {
    # Implemented by the compiler
}

*def inc(a: mut Size) -> void {
    # Implemented by the compiler
}

;; Multiplies {a} and {b} together
*def mul(a: Int, b: Int) -> Int {
    # Implemented by the compiler
}

*def mul(a: Float, b: Float) -> Float {
    # Implemented by the compiler
}

*def mul(a: Double, b: Double) -> Double {
    # Implemented by the compiler
}

*def mul(a: Float, b: Int) -> Float {
    # Implemented by the compiler
}

*def mul(a: Int, b: Size) -> Size {
    # Implemented by the compiler
}

*def mul(a: Size, b: Size) -> Size {
    # Implemented by the compiler
}

*def mul(a: Size, b: Int) -> Size {
    # Implemented by the compiler
}

*def mul(a: Uint, b: Float) -> Float {
    # Implemented by the compiler
}

;; Division

*def div(a: Int, b: Int) -> Int {
    # Implemented by the compiler
}

# Conversion between types

;; Convert {a} to Uint
*def to(a: Int, :Uint) -> Uint {
    # Implemented by the compiler
}

*def to(a: Bool, :Int) -> Int {
    # Implemented by the compiler
}

*def to(a: Bool, :Uint) -> Uint {
    # Implemented by the compiler
}

*def to(a: Bool, :Long) -> Long {
    # Implemented by the compiler
}

*def to(a: Int, :Ulong) -> Ulong {
    # Implemented by the compiler
}

*def to(a: Int, b: Float) -> Float {
    # Implemented by the compiler
}

*def to(a: Size, b: Float) -> Float {
    # Implemented by the compiler
}

*def to(a: Int, b: Double) -> Double {
    # Implemented by the compiler
}

*def to(a: Long, b: Ulong) -> Double {
    # Implemented by the compiler
}

*def to(a: Ulong, b: Long) -> Double {
    # Implemented by the compiler
}

*def to(a: Int, :Bool) -> Bool {
    # Implemented by the compiler
}

*def to(a: Bool, :Ulong) -> Bool {
    # Implemented by the compiler
}

# Logical operations

;; Compares {a} to {b}.
*def cmp(a: Int, b: Int) -> Int {
    # Implemented by the compiler
}

*def cmp(a: Bool, b: Bool) -> Bool {
    # Implemented by the compiler
}

*def cmp(a: Long, b: Int) -> Long {
    # Implemented by the compiler
}

*def cmp(a: Ulong, b: Int) -> Long {
    # Implemented by the compiler
}

*def cmp(a: Uint, b: Int) -> Int {
    # Implemented by the compiler
}

*def cmp(a: Size, b: Size) -> Size {
    # Implemented by the compiler
}

*def cmp(a: Size, b: Int) -> Size {
    # Implemented by the compiler
}

*def cmp(a: Double, b: Int) -> Double {
    # Implemented by the compiler
}

*def cmp(a: Double, b: Double) -> Double {
    # Implemented by the compiler
}

*def cmp(a: Float, b: Float) -> Float {
    # Implemented by the compiler
}

*def cmp(a: Int, b: Size) -> Size {
    # Implemented by the compiler
}

*def cmp(a: Float, b: Int) -> Size {
    # Implemented by the compiler
}

*def and(a: Bool, ^b: Bool) -> Bool {
    # Implemented by the compiler
}

*def or(a: Bool, ^b: Bool) -> Bool {
    # Implemented by the compiler
}

*def xor(a: Bool, b: Bool) -> Bool {
    # Implemented by the compiler
}

# Tag related stuff

;; Use this struct to tag other structs that are intended to be used as tags
;; themselves
struct TagCtor {
    # Implemented by the compiler
}

# String related stuff

;; Use this struct to mark functions that construct strings
struct StrCtor {
    # Implemented by the compiler
}

# Arrays

;; Get the element at position {index} from the array {arr}
*def get(arr: pseudo @Any[], index: Int) -> arr[ Ptr ] {
    # Implemented by the compiler
}

*def get(arr: pseudo @Any[], index: Uint) -> arr[ Ptr ] {
    # Implemented by the compiler
}

*def get(arr: pseudo @Any[], index: Size) -> arr[ Ptr ] {
    # Implemented by the compiler
}

;; Set element at position {index} of the array {arr}
*def set(arr: pseudo @Any[], index: Uint, val: pseudo Any) -> void {
    # Implemented by the compiler
}

;; Set element at position {index} of the array {arr}
*def set(arr: pseudo @Any[], index: Size, val: pseudo Any) -> void {
    # Implemented by the compiler
}

;; Use this struct to mark the function that should be used as the program
;; entry point. If multiple entry points are found during compilation
;; the one with the highest priority is used. If there are more than one
;; function with the highest priority then a compilation error is reported.
struct EntryPoint {
    priority: Int;
}

# Arrays

*def iter(arr: pseudo @Any[]) -> arr[ Size ] {
    # Implemented by the compiler
}

*def valid(arr: pseudo @Any[], idx: Size) -> Bool {
    # Implemented by the compiler
}

*def next(arr: pseudo @Any[], idx: mut Size) -> void {
    # Implemented by the compiler
}

*def len(arr: pseudo @Any[]) -> Size {
    # Implemented by the compiler
}

# External libraries

;; Use this struct to mark external libraries
struct CLib {
    # Implemented by the compiler
}

# Iter stuff

;; Use this struct to mark iterator functions
struct IterCtor {
    # Implemented by the compiler
}

# Function Selection

struct FuncSelection {
    # Compile-time only array-like structure implemented by the compiler
}

# Miscellaneous

# Bitwise Operations

*struct Bits8 {
    # Opaque to the programmer
}

*struct Bits16 {
    # Opaque to the programmer
}

*struct Bits32 {
    # Opaque to the programmer
}

*struct Bits64 {
    # Opaque to the programmer
}

;; Conversion

*def to(a: Int, :Bits32) -> Bits32 {
    # implemented by the compiler
}

*def to(a: Uint, :Bits32) -> Bits32 {
    # implemented by the compiler
}

*def to(a: Long, :Bits64) -> Bits64 {
    # implemented by the compiler
}

*def to(a: Ulong, :Bits64) -> Bits64 {
    # implemented by the compiler
}

*def to(a: Bits32, :Int) -> Int {
    # implemented by the compiler
}

*def to(a: Bits32, :Uint) -> Uint {
    # implemented by the compiler
}

*def to(a: Bits64, :Long) -> Long {
    # implemented by the compiler
}

*def to(a: Bits64, :Ulong) -> Ulong {
    # implemented by the compiler
}

;; Bitwise and
*def and(a: Bits32, b: Bits32) -> Bits32 {
    # implemented by the compiler
}

*def and(a: Bits64, b: Bits64) -> Bits64 {
    # implemented by the compiler
}

;; Bitwise or
*def or(a: Bits32, b: Bits32) -> Bits32 {
    # implemented by the compiler
}

*def or(a: Bits64, b: Bits64) -> Bits64 {
    # implemented by the compiler
}
 
;; Bitwise xor.
*def sub(a: Bits32, b: Bits32) -> Bits32 {
    # implemented by the compiler
}

*def sub(a: Bits64, b: Bits64) -> Bits64 {
    # implemented by the compiler
}

;; Bitwise not
*def cmp(a: Bits32, b: Bits32) -> Bits32 {
    # implemented by the compiler
}

*def cmp(a: Bits64, b: Bits64) -> Bits64 {
    # implemented by the compiler
}

*def shiftl(a: Bits32, times: Int) -> Bits32 {
    # implemented by the compiler
}

*def shiftr(a: Bits32, times: Int) -> Bits32 {
    # implemented by the compiler
}

*def shiftl(a: Bits64, times: Int) -> Bits64 {
    # implemented by the compiler
}

*def shiftr(a: Bits64, times: Int) -> Bits64 {
    # implemented by the compiler
}
