# Header files "stdint.h", "stddef.h", "stdbool.h" are auto imported in symbol c

;; A type that means no-type
*struct void {
    # Implemented by the compiler
    # Should this even be a struct
    # It is a type in C so it makes sense to be one in xy.
}

# Primitive bool type

;; 1-bit true/false type
;; The sizeof(Bool) is 0 as sizeof doesn't support sub-byte sizes
;; Pointers to Bool are not possible as pointers point to bytes
*struct Bool {
    # Implemented by the compiler
}

# Primitive numeric types.

;; 8-bit signed integer type
*struct Byte {
    # Implemented by the compiler
}

;; 16-bit signed integer type
*struct Short {
    # Implemented by the compiler
}

;; 32-bit signed integer type
*struct Int {
    # Implemented by the compiler
}

;; 32-bit signed unicode character/codepoint
;; No input validation is performed so even values outside of the Unicode
;; codepoint range (0 - 1_114_111) can be used as long as they fit in 32 bits.
*struct Char {
    # Implemented by the compiler
}

;; 64-bit signed integer type
*struct Long {
    # Implemented by the compiler
}

;; 8-bit unsigned integer type
*struct Ubyte {
    # Implemented by the compiler
}

;; 16-bit unsigned integer type
*struct Ushort {
    # Implemented by the compiler
}

;; 32-bit unsigned integer type
*struct Uint {
    # Implemented by the compiler
}

;; 64-bit unsigned integer type
*struct Ulong {
    # Implemented by the compiler
}

;; Integer type as large as the addressable memory space on the target
;; architecture. This type is (by definition) platform dependant. It is
;; provided for interfacing with native libraries and for building libraries.
;; Size is always unsigned. For error handling use xy error-handling mechanisms.
*struct Size {
    # Implemented by the compiler
}

;; A good old pointer. Use with caution.
*struct Ptr~[to: struct] {
    # Implemented by the compiler
}

;; Dereferencing a pointer
*def get(ptr: Ptr) -> [ Ptr~[^ptr..to] ] {
    # Implemented by the compiler
}

;; Dereferencing a pointer at an index (offset)
*def get(
    ptr: Ptr,
    idx: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size)
) -> [ Ptr~[^ptr..to] ] {
    # Implemented by the compiler
}

*def set(
    ptr: Ptr,
    idx: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size),
    value: pseudo Any
) -> void {
    # Implemented by the compiler
}

;; The address of Any variable or even temporary value
*def addrof(arg: Any) -> Ptr~[%^arg] {
    # Implemented by the compiler
}

;; 32-bit IEEE 754 floating point number
*struct Float {
    # Implemented by the compiler
}

;; 64-bit IEEE 754 floating point number
*struct Double {
    # Implemented by the compiler
}

# Limits

*def max(:Int) -> Int {
    return c.INT32_MAX;
}

*def max(:Size) -> Size {
    return c.SIZE_MAX;
}

# Arithmetic operations

;; Addition
*def add(
    a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Float, Double),
    b: %a
) -> %a {
    # Implemented by the compiler
}

;; Subtraction
*def sub(
    a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Float, Double),
    b: %a
) -> %a {
    # Implemented by the compiler
}

;; Multiplication
*def mul(
    a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Float, Double),
    b: %a
) -> %a {
    # Implemented by the compiler
}

;; (Integer) Division
*def div(
    a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Float, Double),
    b: %a
) -> %a {
    # Implemented by the compiler
}

;; Modulo arithmetic. Equivalent to '%' in C.
*def mod(
    a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size),
    b: %a
) -> %a {
    # implemented by the compiler
}

## Comparison operators

;; Compare {a} and {b}
*def cmpEq(a: Any, b: Any) ^cmp(a, b) == 0;

;; Compare {a} and {b} for inequality
*def cmpNe(a: Any, b: Any) ^cmp(a, b) != 0;

;; True if {a} > {b}
*def cmpGt(a: Any, b: Any) ^cmp(a, b) > 0;

;; True if {a} >= {b}
*def cmpGe(a: Any, b: Any) ^cmp(a, b) >= 0;

;; True if {a} < {b}
*def cmpLt(a: Any, b: Any) ^cmp(b, a) > 0;

;; True if {a} < {b}
*def cmpLe(a: Any, b: Any) ^cmp(b, a) >= 0;

;; Return 1 if {a} > {b}, 0 if {a} == {b}, -1 if {a} < {b} or there is no order
*def cmp(
    a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Float, Double, Char),
    b: %a
) -> Int {
    # implemented by the compiler
}

## Ptr

*def add(
    ptr: Ptr,
    offset: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Size)
) -> Ptr~[^ptr..to] {
    # implemented by the compiler
}

*def sub(
    ptr: Ptr,
    offset: (Byte, Ubyte, Short, Ushort, Int, Uint, Ulong, Long, Size)
) -> Ptr~[^ptr..to] {
    # implemented by the compiler
}

*def cmp(a: Ptr, b: Ptr) -> Int {
    # Implemented by the compiler
}

## Logic Operations

;; Logic not
*def not(
    a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Bool)
) -> Bool {
    # Implemented by the compiler
}

;; Operator ++
*def inc(
    a: mut (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size)
) -> void {
    # Implemented by the compiler
}

;; Operator --
*def dec(
    a: mut (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size)
) -> void {
    # Implemented by the compiler
}

;; Min of two numbers
*def min(
    a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Float, Double),
    b: %a
) -> %a {
    # implemented by the compiler
}

;; Max of two numbers
*def max(
    a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size, Float, Double),
    b: %a
) -> %a {
    # implemented by the compiler
}

# Mixed signedness arithmetics

;; Compute operation only if {b} is a constant
*def add(
    a: (Byte, Ubyte, Short, Ushort, Uint, Long, Ulong, Size, Float, Double),
    b: Int
) -> %a
>> isConst(^b)
{
    # implemented by the compiler
}

;; ...
*def sub(
    a: (Byte, Ubyte, Short, Ushort, Uint, Long, Ulong, Size, Float, Double),
    b: Int
) -> %a
>> isConst(^b)
{
    # implemented by the compiler
}

;; ...
*def mul(
    a: (Byte, Ubyte, Short, Ushort, Uint, Long, Ulong, Size, Float, Double),
    b: Int
) -> %a
>> isConst(^b)
{
    # implemented by the compiler
}

;; ...
*def div(
    a: (Byte, Ubyte, Short, Ushort, Uint, Long, Ulong, Size, Float, Double),
    b: Int
) -> %a
>> isConst(^b)
{
    # implemented by the compiler
}

;; ...
*def cmp(a: (Ubyte, Ushort, Uint, Ulong, Size), b: Int) -> Int
>> isConst(^b)
{
    # implemented by the compiler
}

;; Compute mixed signedness operation only if {a} is a constant
*def add(a: Int, b: (Uint, Ulong, Size, Float, Double)) -> %b
>> isConst(^a)
{
    # implemented by the compiler
}

;; ...
*def sub(a: Int, b: (Uint, Ulong, Size, Float)) -> %b
>> isConst(^a)
{
    # implemented by the compiler
}

;; ...
*def mul(a: Int, b: (Uint, Ulong, Size, Float)) -> %b
>> isConst(^a)
{
    # implemented by the compiler
}

;; ...
*def div(a: Int, b: (Uint, Ulong, Size, Float)) -> %b
>> isConst(^a)
{
    # implemented by the compiler
}

;; ...
*def cmp(a: Int, b: (Ubyte, Ushort, Uint, Ulong, Size)) -> Int
>> isConst(^a)
{
    # implemented by the compiler
}

# Conversion between types

;; Convert {a} to Ubyte
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Ubyte
) -> Ubyte {
    # Implemented by the compiler
}

;; Convert {a} to Byte
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Byte
) -> Byte {
    # Implemented by the compiler
}

;; Convert {a} to Short
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Short
) -> Short {
    # Implemented by the compiler
}

;; Convert {a} to Ushort
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Ushort
) -> Ushort {
    # Implemented by the compiler
}

;; Convert {a} to Int
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Int
) -> Int {
    # Implemented by the compiler
}


;; Convert {a} to Uint
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Uint
) -> Uint {
    # Implemented by the compiler
}

;; Convert {a} to Long
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Long
) -> Long {
    # Implemented by the compiler
}


;; Convert {a} to Ulong
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Ulong
) -> Ulong {
    # Implemented by the compiler
}

;; Convert {a} to Size
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size,
        Float, Double, Char),
    :Size
) -> Size {
    # Implemented by the compiler
}

;; Convert {a} to Float
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong,
        Float, Double, Char),
    :Float
) -> Float {
    # Implemented by the compiler
}

;; Convert {a} to Double
*def to(
    a: (Bool, Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong,
        Float, Double, Char),
    :Double
) -> Double {
    # Implemented by the compiler
}

;; Convert {a} to Bool
*def to(
    a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong,
        Float, Double, Char),
    :Bool
) -> Bool {
    # Implemented by the compiler
}

;; Convert {a} to Char
*def to(
    a: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong),
    :Char
) -> Char {
    # Implemented by the compiler
}

# Logical operations

*def and(a: Bool, ^b: Bool) -> Bool {
    # Implemented by the compiler
}

*def or(a: Bool, ^b: Bool) -> Bool {
    # Implemented by the compiler
}

*def xor(a: Bool, b: Bool) -> Bool {
    # Implemented by the compiler
}

# Tag related stuff

;; Use this struct to tag other structs that are intended to be used as tags
;; themselves
struct TagCtor {
    # Implemented by the compiler
}

# String related stuff

;; Use this struct to mark functions that construct strings
struct StrCtor {
    # Implemented by the compiler
}

# Arrays

;; Get the element at position {index} from the array {arr}
*def get(
    arr: pseudo @Any[],
    index: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size)
) -> arr[ Ptr ] {
    # Implemented by the compiler
}

;; Set element at position {index} of the array {arr}
*def set(
    arr: pseudo @Any[],
    index: (Byte, Ubyte, Short, Ushort, Int, Uint, Long, Ulong, Size),
    val: pseudo Any
) -> void {
    # Implemented by the compiler
}

;; Use this struct to mark the function that should be used as the program
;; entry point. If multiple entry points are found during compilation
;; the one with the highest priority is used. If there are more than one
;; function with the highest priority then a compilation error is reported.
struct EntryPoint {
    priority: Int;
}

# Arrays

*def iter(arr: pseudo @Any[]) -> arr[ Size ] {
    # Implemented by the compiler
}

*def valid(arr: pseudo @Any[], idx: Size) -> Bool {
    # Implemented by the compiler
}

*def next(arr: pseudo @Any[], idx: mut Size) -> void {
    # Implemented by the compiler
}

*def len(arr: pseudo @Any[]) -> Size {
    # Implemented by the compiler
}

# External libraries

;; Use this struct to mark external libraries
struct CLib {
    # Implemented by the compiler
}

# Iter stuff

;; Use this struct to mark iterator functions
struct IterCtor {
    # Implemented by the compiler
}

# Function Selection

struct FuncSelection {
    # Compile-time only array-like structure implemented by the compiler
}

# Miscellaneous

# Bitwise Operations

*struct Bits8 {
    # Opaque to the programmer
}

*struct Bits16 {
    # Opaque to the programmer
}

*struct Bits32 {
    # Opaque to the programmer
}

*struct Bits64 {
    # Opaque to the programmer
}

;; Conversion integer type -> bits

*def to(a: (Ubyte, Byte), :Bits8) -> Bits8 {
    # implemented by the compiler
}

*def to(a: (Ushort, Short), :Bits16) -> Bits16 {
    # implemented by the compiler
}

*def to(a: (Uint, Int), :Bits32) -> Bits32 {
    # implemented by the compiler
}

*def to(a: (Ulong, Long), :Bits64) -> Bits64 {
    # implemented by the compiler
}

;; Conversion bits -> integer type

*def to(a: Bits8, :Byte) -> Byte {
    # implemented by the compiler
}

*def to(a: Bits8, :Ubyte) -> Ubyte {
    # implemented by the compiler
}

*def to(a: Bits16, :Short) -> Short {
    # implemented by the compiler
}

*def to(a: Bits16, :Ushort) -> Ushort {
    # implemented by the compiler
}

*def to(a: Bits32, :Int) -> Int {
    # implemented by the compiler
}

*def to(a: Bits32, :Uint) -> Uint {
    # implemented by the compiler
}

*def to(a: Bits64, :Long) -> Long {
    # implemented by the compiler
}

*def to(a: Bits64, :Ulong) -> Ulong {
    # implemented by the compiler
}

;; Expanding or truncating bits

*def to(a: (Bits8, Bits16, Bits32, Bits64), :Bits8) -> Bits8 {
    # implemented by the compiler
}

*def to(a: (Bits8, Bits16, Bits32, Bits64), :Bits16) -> Bits16 {
    # implemented by the compiler
}

*def to(a: (Bits8, Bits16, Bits32, Bits64), :Bits32) -> Bits32 {
    # implemented by the compiler
}

*def to(a: (Bits8, Bits16, Bits32, Bits64), :Bits64) -> Bits64 {
    # implemented by the compiler
}


;; Bitwise and
*def and(a: (Bits8, Bits16, Bits32, Bits64), b: %a) -> %a {
    # implemented by the compiler
}

;; Bitwise or
*def or(a: (Bits8, Bits16, Bits32, Bits64), b: %a) -> %a {
    # implemented by the compiler
}

;; Bitwise xor
*def sub(a: (Bits8, Bits16, Bits32, Bits64), b: %a) -> %a {
    # implemented by the compiler
}

;; Bitwise not
*def not(a: (Bits8, Bits16, Bits32, Bits64)) -> %a {
    # implemented by the compiler
}

;; Compare for equality
*def cmp(a: (Bits8, Bits16, Bits32, Bits64), b: %a) -> Bool {
    # implemented by the compiler
}

;; Shift bits left a given number of {times}
;; *NOTE* If {times} is negative or larger than the number of bits in {a}
;; then a mask is applied to {times} before shifting. The mask is
;; * 0x03 - for Bits8  i.e. force a range of 0-7
;; * 0x0F - for Bits16 i.e. force a range of 0-15
;; * 0x1F - for Bits32 i.e. force a range of 0-31
;; * 0x3F - for Bits64 i.e. force a range of 0-61
*def shiftl(
    a: (Bits8, Bits16, Bits32, Bits64),
    times: (Byte, Ubyte, Short, Ushort, Int, Uint)
) -> %a {
    # implemented by the compiler
}

;; Shift bits right a given number of {times}
;; ...
*def shiftr(
    a: (Bits8, Bits16, Bits32, Bits64),
    times: (Byte, Ubyte, Short, Ushort, Int, Uint)
) -> %a {
    # implemented by the compiler
}

;; Arithmetic shift bits right a given number of {times}
;; ...
*def ashiftr(
    a: (Bits8, Bits16, Bits32, Bits64),
    times: (Byte, Ubyte, Short, Ushort, Int, Uint)
) -> %a {
    # implemented by the compiler
}
