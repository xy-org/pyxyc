;; The commmand line arguments as given to main() cannot be easily converted to
;; a format suitable for a xy EntryPoint as arrays and strings are not part of
;; the language but left to libraries to implement. So the language exposes
;; them by pushing the raw argc and argv onto the global stack.
;;
;; I couldn't find a better spot to place this struct. Having it in
;; builtins is wrong because builtins is the very basic types and functions
;; for any xy program and command line arguments is specific to a particular
;; domain. So I plopped them here.

# TODO replace this with an injected struct

import libc~[Clib{headers=@{}}] in c;

;; Hold the raw arguments as given to the program by the OS.
;; Just pop this struct from the global stack to access them.
*struct CmdArgs {
    argc: Int;; size of {argv}
    argv: Ptr~Ptr~[c.char];; pointers to the command line arguments
}
