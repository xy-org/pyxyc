*def sizeof(^arg: Any) -> Size {
    # Implemented by the compiler
}

*def offsetof(^arg: Any) -> Size {
    # Implemented by the compiler
}

*def alignof(^arg: Any) -> Size {
    # Implemented by the compiler
}

struct FieldArray {
    # Compile-time only structure implemented by the compiler
}

*def fieldsof(^arg: Any) -> FieldArray {
    # Implemented by the compiler
}

struct StrLit {
    # Implemented by the compiler
}

*def nameof(^arg: Any) -> StrLit {
    # Implemented by the compiler
}

*def commentof(^arg: Any) -> StrLit {
    # Implemented by the compiler
}

*def packageof(^arg: Any) -> StrLit {
    # Implemented by the compiler
}

;; Return the path to the file where {arg} is compiled
*def fileof(^arg: Any) -> StrLit {
    # Implemented by the compiler
}

;; Return path to the file where the function is called
*def fileof() -> StrLit {
    # Implemented by the compiler
}

;; Return the line {arg} is defined on
*def linenoof(^arg: Any) -> Uint {
    # Implemented by the compiler
}

;; Return line number where the function is called
*def linenoof() -> Uint {
    # Implemented by the compiler
}

;; Return the source code that was compiled into {expr}
*def srcof(^expr: Any) -> StrLit {
    # Implemented by the compiler
}

;; Return the line of code where {expr}'s src is located
*def srclineof(^expr: Any) -> StrLit {
    # Implemented by the compiler
}

;; Return the line of code where this function was called
*def srclineof() -> StrLit {
    # Implemented by the compiler
}

;; Compares two types.
;; Return 0 if types are identical including tags.
;; Return 1 if {a} and {b} have the same basic type but {a} has more tags.
;; return -1 otherwise
*def cmpTypes(^a: Any, ^b: Any) -> Int {
    # Implemented by the compiler
}

;; Compile-time assert {lhs} and {rhs} have compatible types.
;; Two types are considered compatible if cmpTypes({lhs}, {rhs}) >= 0
;; This function is identical to just ">> cmpTypes({lhs}, {rhs}) >= 0" but
;; produces better error messages.
;; If types are compatible then the function always returns true
*def assumeCompatibleTypes(^lhs: Any, ^rhs: Any) -> Bool {
    # Implemented by the compiler
}