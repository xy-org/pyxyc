# c := a + b is equavalent to
# c : (a + b)'typeof = a + b
# The type expression is evaluated at definition time
# The value expression is executed at call time
def func1(a := 0, b := 1, c := a + b) = a * b * c

# a + b is calculated at call time
def func2(a: pseudo ?, b: pseudo ?, c: int = a + b) = c

def func3(ptr: Ptr, arg: pseudo ?) -> Ptr~[<< typeof(arg)] {
    return ptr;
}

def test() {
    a := func1();
    b := func1(a, a~[label=10]);

    c := func2(a, b);

    d := func3(a'addrof, b);
    e := func3(a'addrof, 0.5f);
    f := func3(e'addrof, a);
}