struct Array~[xy_dtor=true, managed=true] {
    mem: Ptr;
}

def free(mem: Ptr) {
    # ...
}

def push(arr: inout Array, val: int) {
    # ...
}

def dtor(p: Array, managed: bool = p'typeof'tagsof.managed) {
    if (managed) {
        p.mem'free();
    }
}

def update(arr: inout Array) {
    # ...
}

def errorProne(arr: Array) -> void || int {
    # ...
}

def funcReturningAnObjectWithDtor(num: int) -> Array {
    arr: var Array;
    for (i in :num) {
        arr'push(i);
    }
    return arr;  # Move out as this is a tmp variable
}

def addr(p: Array) {
    return p.mem; # Copy as this is not a tmp variable
}

def test() {
    arr: var Array;
    arr'push(10);

    update(arr);

    update(funcReturningAnObjectWithDtor(10));

    errorProne(arr);
#    errorProne(funcReturningAnObjectWithDtor(10));
#
#    print(at(arr, 10));
#    print(at(arr, 10));
}
