# --- Type Enums ---

struct Status~Enum {
    pending : pseudo;
    canceled : pseudo;
    processed : pseudo;

    value: int;
}

def printStatus(st: Status) {
    if (st.pending) {
        # ...
    } elif (st.canceled) {
        # ...
    } elif (st.processed) {
        # ...
    }
}

def testEnums(a: int) {
    orderStatus := Status.pending;
    printStatus(orderStatus);

    # Maybe implement this shortcut?
    # It may be useful because there is no need for the Status to be spelt out.
    # printStatus(.processed);
    printStatus(Status.processed);

    st : mut = Status.canceled;
    if (a > 0) {
        st = Status.processed;
    }
    printStatus(st);
}

# ---- Value Enumerations ----

# struct Color {
#     r: float;
#     g: float;
#     b: float;
# }
# 
# def printColor(c: Color) {
#     # ...
# }
# 
# struct PaletteType {
#     red    := Color{1f, 0f, 0f};
#     green  := Color{0f, 2f, 0f};
#     blue   := Color{0f, 0f, 1f};
#     orange := Color{1f, 0.647f, 0f};
#     white  := Color{1f, 1f, 1f};
# }
# 
# Palette := PaletteType{}
# 
# def testValueEnumerations() {
#     c1 := Color{.2f, .2f, 1f};
#     c2 := Palette.blue;
#     printColor(c1);
#     printColor(c2);
# }
