def oneBit(:Bits64) 1l'to(Bits64);

def get(b: Bits64, i: Int) -> Bool {
    return (b & (b'oneBit \shiftl i))'to(Long) != 0;
}

def set(b: mut Bits64, i: Int, val: Bool) -> b[ Int ] {
    b = b | (val'to(Ulong)'to(Bits64) \shiftl i);
    return i;
}

def testBitGetSet(i: Int) -> Bits64 {
    b: Bits64;
    b[0] = true;
    b[1] = b[i];
    b[10] = b[0] | b[12];
    return b;
}

# --------------------------------------

struct Bits {}

def bits(a: Long) -> a[ Bits ] {
    return Bits{};
}

def get(a: Long, b: pseudo Bits) -> Bits64 {
    return a'to(Bits64);
}

def set(num: mut Long, :Bits, i: Int, val: Bool) {
    bits : mut = num'bits;
    bits[i] = val;
    num = bits'to(Long);
}

def set(num: mut Long, :Bits, bits: Bits64) num = bits'to(Long);

def testMixing() {
    ;; Let's try to blend coffee and tea

    a: mut = 0Coffee(36)l;
    b: mut = 0Tea(36)l;

    a'bits[60] = true;
    b'bits[1] = true;
    b'bits[2] = true;
    a'bits[10] = b'bits[10];
    a'bits[11] = !a'bits[11];

    c := (a'bits | b'bits);
    d := (a'bits & b'bits)'to(Long);
    e := (a'bits != b'bits)'to(Long);
    f := (a'bits - b'bits)'to(Long);

    g := (d'bits \shiftr 5)'to(Long);
}

