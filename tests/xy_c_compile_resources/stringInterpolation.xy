# --- Normal strings ---

struct Str {
    addr: Ptr;
    size: Size;
}

def str~[StrCtor{prefix="", interpolation=false}](
    addr: Ptr, size: Size
) -> Str {
    return Str{addr, size};
}

# --- f-strings ---

struct StrBuilder {
    addr: Ptr;
    size: Size;
    cap: Size;
}

def append(builder: inout StrBuilder, str: Str) {
    # left empty for brevity of test
}

def append(builder: inout StrBuilder, f: float, precision:=6) {
    # left empty for brevity of test
}

def append(builder: inout StrBuilder, addr: Ptr, size: Size) {
    # left empty for brevity of test
}

def to(builder: inout StrBuilder, :Str) -> Str {
    res := Str{builder.addr, builder.size};
    # builder.addr = Ptr'null;
    # builder.[cap, size] = 0;
    return res;
}

def fstr~[StrCtor{prefix="f", interpolation=true, to=Str}](
    addr: Ptr, size: Size
) -> StrBuilder {
    return StrBuilder{};
}

def createStrings() {
    pi := 3.1415f;

    str1 := f"string";
    str2 := f"str1={str1}";
    str3 := f"{=str1}";
    str4 := f"{pi}";
    str5 := f"{pi * 2}";
    str6 := f"{pi, 2}";
    str7 := f"{pi, precision=2}";
    str8 := f"{=pi, precision=2}";
}
