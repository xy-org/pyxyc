struct Error {
    errorCode: Int;
}

def to(err: Error, :Bool) err.errorCode != 0;

;; Simple Error Issuing

def power(x: Int, y: Int) -> Int || Error {
    if (y < 0) {
        error Error{1};
    }
    i: mut = 0;
    return while (i <= y) -> (res: Int = 1) {
        res *= x;
        i++;
    };
}

;; Error Propagation

def errorPropagation(x: Int, y: Int) -> Int || Error {
    return power(x, y) - 1;
}

def doWork(x: Int) -> void || Error {
    y := power(x, x);
    print(y);
}

def print(a: Int) -> void {}

def doNothing() -> void || Error {}

def callReturningErrorButNoResult(a: Int, b: Int) -> Int || Error {
    doWork(a);
    doWork(b);
}

;; Errors in functions that issue no errors or issue errors of a different kind

def errorInFuncThatDoesNotIssueAndError(x: Int, y: Int) -> Int {
    if (x < y) {
        error Error{1};
    }
    return x * y;
}

struct Error2 {
    errorCode: Int;
    a: Int;
    b: Int;
}

def errorInFuncThatIssuesDifferentKindOfError(x: Int, y: Int) -> Int || Error2 {
    if (x > 2*y) {
        error Error{1};
    }
    if (x >= y) {
        error Error2{2, x, y};
    }
    return x + y;
}