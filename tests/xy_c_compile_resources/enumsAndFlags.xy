# --- Enums ---

struct Status~Enum {
    pending;
    processed;
    canceled;
} ;; the Enum tag will generate the & method

def testEnums(a: int) {
    orderStatus := Status.pending;
    printStatus(orderStatus);
    printStatus(.processed);

    type : Status = .canceled;
    if (a > 0) {
        type = .processed;
    }
}

# --- Flags ---

struct OpenFlags~Flags {
    read : bit~[xy_bitmask=c.O_READ] = 0;
    write : bit~[xy_bitmask=c.O_WRITE] = 0;
    append : bit~[xy_bitmask=c.O_APPEND] = 0;
} ;; the Flags tag will generatte the | operator

def String {
    addr: Ptr;
    size: Size;
}

def string~[StringCtor{prefix=""}](addr: Ptr, size: Size) = String{addr, size}

def open(fn: String, flags=OpenFlags{.read}) {
    if (flags.read & flags.write) {
        # reading and writing
    } if (flags == OpenFlags{.read, .append}) {
        # reading and appending ...
    } elif (flags.read) {
        # reading ...
    } elif (flags.write) {
        # writing ...
    }
}

def testFlags() {
    open("file.txt")
    open("file.txt", OpenFlags.read);
    open("file.txt", OpenFlags.read | OpenFlags.write);
    open("file.txt", .read | .write);
}
