import xy.ctti;

struct Point {
    x: Float;
    y: Float;
    z: Float;
    w: Float = 1.0f;
}

def select(p: Point, idx: Int) -> p[ Int ] {
    return idx;
}

def get(p: Point, idx: Int) -> Float {
    return @{p.x, p.y, p.z, p.w}[idx];
}

def set(p: mut Point, idx: Int, v: Float)
>> idx <= 3
{
    if (idx == 0) {
        p.x = v;
    } elif (idx == 1) {
        p.y = v;
    } elif (idx == 2) {
        p.z = v;
    } else {
        p.w = v;
    }
}

def testPoint(i: Int) -> Float {
    p1: mut = Point{w=i'to(Float)};
    p2: Point;
    p1.x = p1[i];
    p2.z = p1[4-i];
    sum := p1.x + p2[2] + p2.z + p1[3];
    res : mut = p1[0];
    p2[0] = p1[0];
    res += p2[0];
    return res + sum;
}

struct  PointCloud {
    mem: Ptr;
    len: Size;
}

def append(pc: mut PointCloud, p: Point) {
    pc.len++;
    # rest omitted for brievity
}

def select(pc: PointCloud, i: Int) -> pc[ Int ] {
    return i;
}

def get(pc: PointCloud, i: Int) -> pc[ Ptr~Point ] {
    return pc.mem~[to=Byte] + i * sizeof(Point);
}
 
def set(pc: mut PointCloud, i: Int, p: Point) {
    # not implemented for brievity
}

def testPointCloud(m0: mut PointCloud, m1: PointCloud) {
    ms : PointCloud;
    ms'append(Point{1.0f, 1.0f, .05f, 1.0f});
    ms'append(Point{1.0f, 1.0f, .05f, 1.0f});

    p := m0[10];

    m0[0] = Point{1.0f, 2.0f, 3.0f, 0.0f};

    m0[0].y = 10.0;
    tmp := m1[1][2];

    ms[2] = m0[2];
    ms[2].x = m0[0].y;
    ms[4] .= {x=5, y=10};
}
