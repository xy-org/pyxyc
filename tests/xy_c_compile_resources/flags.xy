import posix~[CLib{headers=["unistd.h", "fcntl.h"]}] in c;

# --- Flags ---

struct OpenFlags~Flags {
    value : int;

    readOnly : pseudo int = c.O_RDONLY;
    writeOnly : pseudo int = c.O_WRONLY;
    readWrite : pseudo int = c.O_RDWR;
    append : pseudo int = c.O_APPEND;
} ;; the Flags tag will generatte the | operator

struct String {
    addr: Ptr;
    size: Size;
}

def string~[StrCtor{prefix=""}](addr: Ptr, size: Size) = String{addr, size}

def open(fn: String, flags:=OpenFlags.readOnly) {
    if (flags.readWrite) {
        # reading, writing and maybe something else
    } elif (flags == OpenFlags{.readOnly, .append}) {
        # reading and appending only ...
    } elif (flags.readOnly) {
        # at least reading ...
    } elif (flags.writeOnly) {
        # at least writing ...
    }
}

def testFlags() {
    open("file.txt");
    open("file.txt", OpenFlags.readOnly);
    open("file.txt", OpenFlags.readOnly | OpenFlags.writeOnly);
    open("file.txt", OpenFlags{.writeOnly, .append});
    flags: OpenFlags;
    flags.writeOnly = true;
    open("file.txt", flags);
    open("file.txt", flags{.append});
    open("file.txt", flags{});
    open("file.txt", flags | OpenFlags{.readOnly});
    flags2 := OpenFlags{.append};
    open("file.txt", flags | flags2);
    open("file.txt", flags & flags2);
    flags3 := OpenFlags{value=0x80};
    flags4 := OpenFlags{0x08};
}
