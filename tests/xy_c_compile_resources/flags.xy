import posic~[CLib{headers=["unistd.h", "fcntl.h"]}] in c

# --- Flags ---

#define flags_OpenFlags__readOnly O_RDONLY
#define flags_OpenFlags__writeOnly O_WRONLY
#define flags_OpenFlags__readWrite O_RDWR
#define flags_OpenFlags__append O_APPEND

struct OpenFlags~Flags {
    # readOnly : pseudo int = c.O_RDONLY;
    # writeOnly : pseudo int = c.O_WRONLY;
    # readWrite : pseudo int = c.O_RDWD;
    # append : pseudo int = c.O_APPEND;
    readOnly : pseudo int = 1;
    writeOnly : pseudo int = 2;
    readWrite : pseudo int = 4;
    append : pseudo int = 8;

    value : int;
} ;; the Flags tag will generatte the | operator

struct String {
    addr: Ptr;
    size: Size;
}

def string~[StrCtor{prefix=""}](addr: Ptr, size: Size) = String{addr, size}

def open(fn: String, flags:=OpenFlags.readOnly) {
    if (flags.readWrite) {
        # reading, writing and maybe something else
    }
    #elif (flags == OpenFlags{.readOnly, .append}) {
    #    # reading and appending only ...
    #} elif (flags.readOnly) {
    #    # at least reading ...
    #} elif (flags.writeOnly) {
    #    # at least writing ...
    #}

    # else if (flags == (flags_OpenFlags__readOnly | flags_OpenFlags__append)) {
    # } else if (flags & flags_OpenFlags__readOnly) {
    # } else if (flags & flags_OpenFlags__writeOnly) {
    # }
}

def testFlags() {
    open("file.txt");
    open("file.txt", OpenFlags.readOnly);
    open("file.txt", OpenFlags.readOnly | OpenFlags.writeOnly);
    # open("file.txt", OpenFlags{.writeOnly, .append});
    # flags: OpenFlags;
    # flags.writeOnly = true;
    # open("file.txt", flags);
    # open("file.txt", flags{.append});
}
