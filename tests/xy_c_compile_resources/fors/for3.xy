;; An array of up to 100 floats
struct Array {
    elems: Float[100];
    len: Size;
}

def iter(arr: pseudo Array) -> in(arr) Size {
    return 0;
}

def valid(arr: Array, idx: Size) = idx < arr.len;

def next(arr: pseudo Array, idx: mut Size) {
    idx++;
}

def get(arr: mut Array, idx: Size) -> in(arr) Ptr~Float
>> valid(arr, idx)
{
    return arr.elems[idx]'addrof;
}

def set(arr: mut Array, idx: Size, elem: Float) 
# >> valid(arr, idx)
{
    arr.elems[idx] = elem;
}

def sum(arr: Array) -> Float {
    return for(elem in arr) -> (res: Float) {
        res += elem;
    };
}

def mix(arr1: Array, arr2: Array) -> Float
>> arr1'len == arr2'len
{
    return for(i in :, e1 in arr1, e2 in arr2) -> (res: Float) {
        res += i * e1 * e2;
    };
}

def double(arr1: mut Array) {
    for(elem in arr1) {
        if (elem > 0) {
            elem = 2.0f * elem;
            elem += elem;
        }
    }
}

def doSomething(f: Float) {
}

def changeSomehow(f: mut Float) {
}

def iterAndChange(arr1: mut Array) {
    for(elem in arr1) {
        doSomething(elem);
        changeSomehow(elem);
    }
}
