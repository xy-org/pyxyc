##########################
# Iterating over a slice #
##########################

;; An array of up to 100 floats
struct Array {
    elems: @Float[100];
    len: Size;
}


struct Slice {
    n: Size;
    m: Size;
}

struct SliceIter {
    i: Size;
    lim: Size;
}


def slice(start: Size, end: Size) -> Slice{
    return Slice{start, end};
}

def iter(arr: Array, slice: Slice) -> arr[ SliceIter ] {
    return SliceIter{slice.n, slice.m};
}

def valid(arr: Array, iter: SliceIter) -> Bool {
    return iter.i < arr.len & iter.i < iter.lim;
}

def next(arr: Array, iter: mut SliceIter) {
    iter.i++;
}

def get(arr: Array, iter: SliceIter) -> Float {
    return arr.elems[iter.i];
}

def set(arr: Array, iter: SliceIter, val: Float) {
    arr.elems[iter.i] = val;
}

def calmpTo0(arr: mut Array, n: Size, m: Size) {
    for (elem in arr[n:m]) {
        if (elem < 0) {
            elem = 0.0f;
        }
    }
}
