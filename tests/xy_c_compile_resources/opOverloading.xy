struct MyInt {
    num: Int;
}

def cmp(a: MyInt, b: MyInt) -> Int {
    return (a - b).num;
}

def add(a: MyInt, b: MyInt) -> MyInt {
    return MyInt{a.num + b.num};
}

def sub(a: MyInt, b: MyInt) -> MyInt {
    return MyInt{a.num - b.num};
}

def mul(a: MyInt, b: MyInt) -> MyInt {
    return MyInt{a.num * b.num};
}

def div(a: MyInt, b: MyInt) -> MyInt {
    return MyInt{a.num / b.num};
}

def cmpMyInts() -> Int {
    a := MyInt{0};
    b := MyInt{1};

    if (a > b) {
        return 1;
    }

    if (a * MyInt{0} > MyInt{1}) {
        return 2;
    }

    if (a / MyInt{1} <= b) {
        return 3;
    }

    return 0;
}


struct Pair {
    a: MyInt;
    b: MyInt;
}

def cmp(p1: MyInt, n: Int) -> Int {
    return p1.num - n;
}

def cmp(p1: Pair, p2: Pair) -> MyInt {
    return p1.a - p2.a;
}

def cmpPairs() -> Int {
    p1 := Pair{MyInt{0}, MyInt{1}};
    p2 := Pair{MyInt{2}, MyInt{3}};
    if (p1 > p2) {
        return 1;
    }
    return 0;
}