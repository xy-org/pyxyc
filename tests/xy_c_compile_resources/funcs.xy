# Funcs having in and inout params

struct A {
    num: int;
}

def double(a: A) = A{a.num * 2}

def doubleInout(a: inout A) {
    a.num *= 2;
}

def callDoubles(a: inout A) -> A {
    a = double(a);
    doubleInout(a);
    return a;
}

def test() -> int {
    a : var = A{5};
    double(a);
    doubleInout(a);
    return callDoubles(a).num;
}

# Funcs with default arguments

def defaultArg1(a: A, b : A = A{0}) = A{a.num + b.num}

# def defaultArg1(a: A, b := A{0}) = A{a.num + b.num}
# 
# def defaultArg2(a: A, b := rndA()) = A{a.num * b.num}
# 
# def defaultArg3(a: A, b := a'defaultArg1) = A{a.num - b.num}
# 
# def rndA() = A{5}
# 
def testDefaultArgs() {
    defaultArg1(A{0});
    #A{0}'defaultArg1();
    #a := A{10};
    #a'defaultArg1(A{0});
    #a'defaultArg2();
    #a'defaultArg2(A{10});
    #a'defaultArg3();
    #a'defaultArg3(A{20});
}