def statementLike(x : Int, y: Int) -> Int {
    if (x < y) {
        return x * y * 3;
    } else {
        return y * 2;
    }
}

def expressionLike(x : Int, y: Int) -> Int {
    return if (x < y) x * y * 3 else y * 2;
}

def namedIf(x: Int, y: Int) -> Int {
    res := if (x < y) -> (res: Int) {
        res = x * y * 3;
    } else {
        res = y * 2;
    };
    return res;
}

def elifs(x: Int, y: Int) -> Int {
    return if (x < y) -> (res: Int) {
        res = 0;
        _ = namedIf(x, y);
    } elif (x < y) {
        res = 1;
    } else {
        res = 2;
    };
}

def elifs2(x: Int, y: Int) -> Int {
    return if (x < y) -> (res: Int) {
        res = 0;
    } elif (x < y) 1 else 2;
}

def chainedIfs(x: Int, y: Int) -> Int {
    a := if (x > y) 1 elif (x < y) -1 else 0;
    return a;
}
