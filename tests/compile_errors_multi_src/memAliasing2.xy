;; Test passing a reference to a list and an item to that list at the same time

struct IntList {
    # ...
}

def get(arr: IntList, i: int) -> in(arr) Ptr~int {
    return Ptr{};
}

def set(arr: mut IntList, i: int, val: int) -> void {
    # ...
}

def func2(a: mut int, b: mut int) {}

def func1(item: mut int, list: mut IntList) {}

def test() {
    a: IntList;
    func1(a[0], a);; should give an error. What about injected content

    func(a[0], a[10]);; OK. Allowed limited aliasing

    b: int;
    func(a, b);; OK

    c: IntList;
    func(a, c);; OK

    func(a, a);; OK
}

def test(a: mut IntList, b: mut IntList) {
    func(a[0], b);; not safe
    func(a[0], a[10]);; safe despite the fact they may alias
    func(a[0], a);; not safe
}