import xy.ctti;
import libxy.string;
import libxy.stdio;

;; MyStruct comment
struct MyStruct {
    ;; My name
    name: Str;

    ;; Some number
    num: Size;

    integer: int = -1;

    ;; Array of
    ;; floats
    arr: float[10];

    next: Ptr~MyStruct;
}

struct FieldDesc{
    name: Str;
    typename: Str;
    size: Size;
    offset: Size;
    alignment: Size;
    comment: Str;
}

def printTypeInfo(
    s: pseudo any,
    typeName := nameof(%s),
    typeComment := commentof(%s),
    fields: pseudo FieldDesc[] = @[
        for (f in s'fieldsof) FieldDesc{
            name=f'nameof,
            typename=nameof(%f),
            size=f'sizeof,
            offset=f'offsetof,
            alignment=f'alignof,
            comment=f'commentof,
        }
    ],
    fieldsPtr : Ptr~FieldDesc = fields'addrof,
    fieldsLen : Size = fields'len
) {
    if (typeComment.len > 0) {
        print(f";; {typeComment}\n");
    }
    print(f"struct {typeName} \{\n");
    for (i in :fieldsLen) {
        f := fieldsPtr[i];
        if (f.comment.len > 0) {
            print(f"    ;; {f.comment}\n");
        }
        print(f"    {f.name}: {f.typename}; # size={f.size} offset={f.offset} alignof={f.alignment}\n");
    }
    print("}\n");
}

def main~EntryPoint() {
    s := MyStruct{};
    printTypeInfo(s);
}