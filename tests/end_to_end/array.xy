import libxy.units

struct Array~[elemType: struct] {
    mem: Memory;
    len: Size~Count;
}

def len(a: Array) = a.len

def push(
    arr: inout Array,
    elem: pseudo a'tagsof.elemType,
    elemMem := elem'addrof,
    elemSize := elem'sizeof,
) {
    arr'ensureCapacity(arr.len + 1);
    arr.mem[arr.len * elemSize :+ elemSize] = elemMem;
    arr.len++;
}

def ensureCapacity(arr: inout Array, requiredCap: Size, elemSize := arr'tagsof["elemType"]'sizeof) {
    if (arr.mem.len < (requiredCap * elemSize)) {
        arr.mem.relocate(max(requiredCap * elemSize, 2 * arr.mem.len));
    }
}

struct Point {
    x: int;
    y: int;
}

def main~EntryPoint() {
    ints: Array~int;
    points: Array~Point;
    for (i in :100) {
        ints.push(i);
        points.push(Point{ints[ints'len -1 -i] + i, ints[i]});
    }

    return for (i in :, num in ints, point in points) -> (res := 0) {
        res *= (point.x - point.y) * num - i;
    }
}
