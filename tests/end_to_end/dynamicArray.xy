import xy.ctti in ctti;
import libxy.units;
import libxy.memory;
import libxy.stdio;
import libxy.strings;
import libxy.slices;

struct Array~[elemType: struct, xy_dtor=true] {
    mem: Memory;
    len: Size~Count;
}

def dtor(arr: inout Array) {
    arr.mem'free();
}

def len(a: Array) = a.len;

def max(a: Size, b: Size) -> Size {
    return if (a > b) a else b;
}

def ensureCapacity(
    arr: inout Array,
    requiredCap: Size,
    elemSize : Size = ctti.sizeof(arr..elemType)
) {
    minRequiredSize := requiredCap * elemSize;
    if (arr.mem.size < minRequiredSize) {
        arr.mem'realloc(max(minRequiredSize, 2 * arr.mem.size));
    }
}

def push(
    arr: inout Array,
    elem: pseudo ?,
    elemMem: Ptr = elem'addrof,
    elemSize := ctti.sizeof(elem)
)
# >> ctti.compatible(arr..elemType, %elem, arr, elem)
{
    arr'ensureCapacity(arr.len + 1, elemSize=elemSize);
    arr.mem[arr.len * elemSize +: elemSize] = elemMem;
    arr.len++;
}


def get(
    arr: Array, i: Size,
    elemSize : Size = ctti.sizeof(arr..elemType)
) -> ref(arr) Ptr~[^arr..elemType] {
    return arr.mem.addr + i * elemSize;
}

def get(
    arr: Array, i: int,
    elemSize : Size = ctti.sizeof(arr..elemType)
) -> ref(arr) Ptr~[^arr..elemType] {
    return arr.mem.addr + i * elemSize;
}

struct ArrayIter {
    idx: Size;
}

def iter(arr: Array) -> ref(arr) ArrayIter {
    return ArrayIter{};
}

def valid(arr: Array, iter: ArrayIter) = iter.idx < arr'len;

def next(arr: pseudo Array, iter: inout ArrayIter) {
   iter.idx++;
}

def get(arr: Array, iter: ArrayIter, elemSize : Size = ctti.sizeof(arr..elemType)) -> ref(arr) Ptr~[^arr..elemType] {
    return arr.mem'at(iter.idx * elemSize);
}

# ----------------- test code -----------------

struct Point {
    x: int;
    y: int;
}

def main~EntryPoint() -> int {
    ints: Array~int;
    points: Array~Point;
    for (i in :100) {
        ints'push(i);
        points'push(Point{ints[ints'len -1 -i] + i, ints[i]});
    }

    print(f"len={ints'len}\n");

    res : int;
    for (i in :100) {
        res += (points[i].x - points[i].y) * ints[i] - i;
        res += (points[i].x - points[i].y);
    }

    for (i in :, num in ints, point in points) {
        res += (point.x - point.y) * num - i;
    };

    print(f"{=res}\n");

    return 0;
}
