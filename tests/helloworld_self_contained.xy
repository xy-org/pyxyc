cimport unistd.h, errno.h in c

;; Struct representing a file handle.
struct File~[xy.copy=false] {
    fd: int = -1;
}

flags OpenFlags {
    append = c.O_APPEND,
    create = c.O_CREAT,
    directory = c.O_DIRECTORY,
    read = c.O_READ,
    write = c.O_WRITE,
}

;; Tag file which are externally managed and should not be closed.
struct NoClose;

;; Opens a file
export def open(name: String, flags: OpenFlags) -> File | ErrnoError {
    fd : int = c.open(name, flags);
    if (fd < 0) {
        error ErrnoError{c.errno};
    }
    return File{fd};
}

;; Writes `msg` to `f`
export def write(f: File, msg: String) -> void | ErrnoError {
    totalWritten : var Size = 0;
    while (totalWritten < msg.buf.len) {
        bytesWritten : c.ssize_t = c.write(
            f.fd, msg.buf.addr + totalWritten, msg.buf.len - totalWritten
        );
        if (bytesWritten < 0) {
            error ErrnoError{c.errno};
        }
        totalWritten += bytesWritten;
    }
}

;; Prints `msg` to standards output
export def print(msg: String) -> void {
    stdout := File~[delete=NoClose]{0};
    stdout'write(f"{msg}\n");
}

export def delete(f: File) -> void {
    if (f.fd >= 0) {
        c.close(f.fd);
    }
}

export def delete(f: File~[delete=NoClose]) -> void {
}

def main~EntryPoint() -> int {
    print("Hello World!\n");
    return 0;
}